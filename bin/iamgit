#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'byebug'
require_relative '../lib/git_repo'

def abort_with(msg)
  puts msg
  exit 1
end

top_command = ARGV.shift

case top_command
when 'init'
  GitRepo.create

when 'hash-object'
  options = { write: false }

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: iamgit hash-object [options] <file>'

    opts.on('-w', '--write', 'Write object to .mygit/objects') do
      options[:write] = true
    end

    opts.on('-h', '--help', 'Help message!') do
      puts opts
      exit
    end
  end

  begin
    parser.parse!

    filename = ARGV.shift

    abort_with('Error: Missing target file') if filename.nil?

    hash = GitRepo.hash_object(filename, write: options[:write])
    puts hash
  rescue OptionParser::InvalidOption => e
    abort_with("Error: #{e.message}\n\n#{parser}")
  end
when 'cat-file'
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: iamgit cat-file [options] <hash>'

    opts.on('-p', '--pretty-print', 'Print content of a object') do
      options[:mode] = 'content'
    end
    opts.on('-t', '--object-type', 'Print the type of a object') do
      options[:mode] = 'type'
    end

    opts.on('-h', '--help', 'Help message!') do
      puts opts
      exit
    end

  end
  begin
    parser.parse!

    puts parser.parse!

    hash = ARGV.shift

    abort_with('Error: Missing hash') if hash.nil?

    print_value = GitRepo.print(hash, mode: options[:print])
    puts print_value
  rescue OptionParser::InvalidOption => e
    abort_with("Error: #{e.message}\n\n#{parser}")
  end
when 'write-tree'
  GitRepo.create
  tree = GitRepo.write_tree
  puts tree
when 'commit'
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: iamgit commit -m "message"'

    opts.on('-m', 'message', 'Describe commit') do
      options[:message] = 'message'
    end

    opts.on('-h', '--help', 'Help message!') do
      puts opts
      exit
    end
  end
  begin
    parser.parse!

    commit_message = ARGV.shift

    abort_with('Error: Commit Message missing') if commit_message.nil?
    abort_with('Error: Message too short, min 3 chars.') if commit_message.size < 3

    tree = GitRepo.write_tree

    commit = GitRepo.commit(tree, commit_message)
    puts commit
  rescue OptionParser::InvalidOption => e
    abort_with("Error: #{e.message}\n\n#{parser}")
  end
when 'add'
  options = {}

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: iamgit add <file>'

    opts.on('-h', '--help', 'Help message!') do
      puts opts
      exit
    end
  end
  begin
    parser.parse!

    files = ARGV

    files_found = []

    files.each do |filename|
      found = Dir.glob("**/#{filename}").find {|f| File.file? f }
      
      abort_with("fatal: pathspec '#{filename}' did not match anyfile") unless found

      files_found << found
    end

    GitRepo.add(files_found)

   # puts File.exist?(filename)
  end
else
  puts "Unkown command: #{command}"
  puts 'Avaiable commands: init, hash-object, cat-file'
  exit 1
end
